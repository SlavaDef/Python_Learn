import random


class Blackjack:
    def __init__(self):
        self.deck = self.create_deck() # –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä—ñ —Å—Ç–≤–æ—Ä—é—î–º–æ –º–∞—Å–∏–≤ —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ create_deck()
        random.shuffle(self.deck) # –ø–µ—Ä–µ–º—ñ—à—É—î–º–æ –º–∞—Å–∏–≤


    def create_deck(self):
        suits = ['hearts', 'diamonds', 'spades', 'clubs']
        values = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A']
        # List comprehension –≥–µ–Ω–µ—Ä—É—î –≤—Å—ñ –º–æ–∂–ª–∏–≤—ñ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –≤–∫–ª–∞–¥–µ–Ω—ñ —Ü–∏–∫–ª–∏:
        # –∫–æ–∂–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–Ω—é –∑ –º–∞—Å–∏–≤—É suits –ø—Ä–∏—Å–≤–æ—î—Ç—å—Å—è –∫–æ–∂–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –∑ –º–∞—Å–∏–≤—É values
        return [f"{value}_{suit}" for suit in suits for value in values]


    def deal_card(self):
        # deck.pop() –≤–∏–¥–∞–ª–∏—Ç—å —ñ –ø–æ–≤–µ—Ä–Ω–µ –∫–∞—Ä—Ç—É –∑ –º–∞—Å–∏–≤—É, —Ä–æ–∑–¥–∞—á–∞ (–º—ñ–π —Å–ø–æ—Å—ñ–± –±—É–≤ –≤–∏–±—Ä–∞—Ç–∏ —Ä–µ–Ω–¥–æ–º–Ω—É —ñ –ø–æ—Ç—ñ–º —ó—ó –≤–∏–¥–∞–ª–∏—Ç–∏)
        return self.deck.pop() if self.deck else None


    def hand_value(self, hand):
        value_map = {'J': 10, 'Q': 10, 'K': 10, 'A': 11} # dictionary
        total = 0
        aces = 0

        for card in hand: # hand = massive
            rank = card.split('_')[0] # get masive with J-A or 2-10
            if rank in value_map: # keys, first in dictionary
                total += value_map[rank] # total = total + value( it is number)  of the dictionary
                if rank == 'A': # if our key is 'A'
                    aces += 1 # aces+1
            else:
                total += int(rank) # else we have numbers 2-10 total=total+(2-10)

        while total > 21 and aces: # –ø–æ–∫–∏ –≤ —Ä—É—Ü—ñ —î —Ç—É–∑ —ñ total > 21
            total -= 10  # –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—É–∑–∞ –∑ 11 –Ω–∞ 1
            aces -= 1 # –∫–æ–∂–Ω–∏–π —Ç—É–∑ + 1 –∫ aces (–ª—ñ—á–∏–ª—å–Ω–∏–∫ —Ç—É–∑—ñ–≤)

        return total # return our count


    def player_turn(self, hand):
        while True:
            print(f"Your cards: {hand}, count = {self.hand_value(hand)}") # –æ—Ç—Ä–∏–º—É—î–º–æ –ø–∞—Ä—É –∫–∞—Ä—Ç, —Ä–∞—Ö—É—î–º–æ —Å—É–º—É
            choice = input("1. Stop\n2. Continue\n> ") # –≤–∏–±—ñ—Ä - –¥–∞–ª—ñ —á–∏ —Å—Ç–æ–ø
            if choice == '1':
                break
            elif choice == '2':
                hand.append(self.deal_card())# –≤ –º–∞—Å–∏–≤ –∫–∞—Ä—Ç –≤ —Ä—É—Ü—ñ –¥–æ–¥–∞—î–º–æ —è–∫—É—Å—å –∫–∞—Ä—Ç—É –≤–∏–¥–∞–ª–µ–Ω—É –∑ –∫—ñ–Ω—Ü—è –∫–æ–ª–æ–¥–∏
                if self.hand_value(hand) > 21:# —è–∫—â–æ –≤ –ø—Ä–æ—Ü–µ—Å—ñ –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É-–æ–±—Ä–æ–±–∫–∏ –Ω–∞ —Ä—É—Ü—ñ –±—ñ–ª—å—à–µ —á–∏–º 21
                    print(f"Your cards: {hand}, count = {self.hand_value(hand)}")# –ø–æ–∫–∞–∑—É—î–º–æ –∫–∞—Ä—Ç–∏ —ñ –∫–∞—É–Ω—Ç
                    print("You lose!")
                    return self.hand_value(hand)
            else:
                print("‚ùå Invalid input! Try again.")
        return self.hand_value(hand) # –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ—á–æ–∫ —â–æ–± –¥–∞–ª—ñ —ó—Ö –ø–æ—Ä—ñ–≤–Ω—è—Ç–∏ –∑ –∫—ñ–ª—ñ—Å—Ç—é —É –∫–æ–º–ø–∞


    def computer_turn(self):
        hand = [self.deal_card(), self.deal_card()] # –∫–æ–º–ø –æ—Ç—Ä–∏–º—É—î –¥–≤—ñ –∫–∞—Ä—Ç–∏ –∑ –∫—ñ–Ω—Ü—è –∫–æ–ª–æ–¥–∏ –≤–∏–¥–∞–ª–∏–≤—à–∏ —ó—Ö –∑ –º–∞—Å–∏–≤—É –∫–∞—Ä—Ç
        while self.hand_value(hand) < 17: # –ø–æ–∫–∏ –º–µ—Ç–æ–¥ –ø–æ–≤–µ—Ä—Ç–∞—î –º–µ–Ω—à–µ 17
            hand.append(self.deal_card()) # –¥–æ–¥–∞—î–º–æ –∫–∞—Ä—Ç—É
        print(f"Computer's cards: {hand}, count = {self.hand_value(hand)}") # –¥—Ä—É–∫ –∫–∞—Ä—Ç –∫–æ–º–ø–∞ —ñ –π–æ–≥–æ –æ—á–∫–∏
        return self.hand_value(hand) # –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ—á–æ–∫ –∫–æ–º–ø–∞


    def play_game(self):
        player_hand = [self.deal_card(), self.deal_card()] # –ø–æ—á–∞—Ç–∫–æ–≤—ñ –¥–≤—ñ –∫–∞—Ä—Ç–∏ –ª—é–¥–∏–Ω–∏
        player_score = self.player_turn(player_hand) # –≤ –º–µ—Ç–æ–¥ –≥—Ä–∏ –¥–ª—è –≥—Ä–∞–≤—Ü—è –ø–µ—Ä–µ–¥–∞—î–º–æ —Ä—É–∫—É –≥—Ä–∞–≤—Ü—è

        if player_score > 21:
            return # –≤–∏—Ö—ñ–¥ –∑ –º–µ—Ç–æ–¥—É –±–æ –≥—Ä–∞–≤–µ—Ü—å –ø–µ—Ä–µ–±—Ä–∞–≤ –¥–∞–ª—ñ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –Ω–µ –π–¥–µ

        computer_score = self.computer_turn()

        if computer_score > 21 or player_score > computer_score:
            print("You win!")
        elif player_score < computer_score:
            print("Computer wins!")
        else:
            print("Draw!")


if __name__ == "__main__":
    game = Blackjack()
    game.play_game()


#  –Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î?
# total > 21 ‚Äì –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ—á–æ–∫ –±—ñ–ª—å—à–µ 21 (—Ç–æ–±—Ç–æ –ø–µ—Ä–µ–±—ñ—Ä).
#
# aces ‚Äì –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —É –Ω–∞—Å —Ç—É–∑–∏, —è–∫—ñ —â–µ —Ä–∞—Ö—É—é—Ç—å—Å—è —è–∫ 11.
#
# –Ø–∫—â–æ –æ–±–∏–¥–≤—ñ —É–º–æ–≤–∏ True, —Ç–æ:
#
# –í—ñ–¥–Ω—ñ–º–∞—î–º–æ 10 –≤—ñ–¥ –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—É–º–∏ (total -= 10), –∑–º—ñ–Ω—é—é—á–∏ –æ–¥–∏–Ω —Ç—É–∑ –∑ 11 –Ω–∞ 1.
#
# –ó–º–µ–Ω—à—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ —Ç—É–∑—ñ–≤ (aces -= 1), —â–æ–± –±—ñ–ª—å—à–µ –Ω–µ —Ä–∞—Ö—É–≤–∞—Ç–∏ —Ü–µ–π —Ç—É–∑ —è–∫ 11.
#
# –Ø–∫—â–æ –ø—ñ—Å–ª—è —Ü—å–æ–≥–æ total –≤—Å–µ —â–µ > 21 —ñ –∑–∞–ª–∏—à–∏–ª–∏—Å—å —Ç—É–∑–∏, —Ü–∏–∫–ª –ø–æ–≤—Ç–æ—Ä—é—î—Ç—å—Å—è.

# –¶–µ–π —Ü–∏–∫–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∫–æ—Ä–∏–≥—É—î –∑–Ω–∞—á–µ–Ω–Ω—è —Ç—É–∑—ñ–≤, –∑–º–µ–Ω—à—É—é—á–∏ —ó—Ö –∑ 11 –¥–æ 1, —è–∫—â–æ –∑–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –ø–µ—Ä–µ–≤–∏—â—É—î 21.
# üîπ –¶–µ –≥–∞—Ä–∞–Ω—Ç—É—î, —â–æ –≥—Ä–∞–≤–µ—Ü—å –æ—Ç—Ä–∏–º–∞—î –Ω–∞–π–±—ñ–ª—å—à –≤–∏–≥—ñ–¥–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É –æ—á–æ–∫.
# üîπ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è while –∑–∞–±–µ–∑–ø–µ—á—É—î –≥–Ω—É—á–∫–µ –∫–æ—Ä–∏–≥—É–≤–∞–Ω–Ω—è, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –≤ —Ä—É—Ü—ñ –∫—ñ–ª—å–∫–∞ —Ç—É–∑—ñ–≤.


# if __name__ == "__main__":?
# –¶–µ–π —Ä—è–¥–æ–∫ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏, —è–∫ —Å–∞–º–µ –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è —Å–∫—Ä–∏–ø—Ç.
# –í—ñ–Ω –¥–æ–∑–≤–æ–ª—è—î —Ä–æ–∑—Ä—ñ–∑–Ω—è—Ç–∏, —á–∏ –∫–æ–¥ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è —è–∫ –æ—Å–Ω–æ–≤–Ω–∏–π —Ñ–∞–π–ª —á–∏ –π–æ–≥–æ —ñ–º–ø–æ—Ä—Ç—É—é—Ç—å —è–∫ –º–æ–¥—É–ª—å.
#
# üîπ –Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î?
# –£ Python –∫–æ–∂–µ–Ω —Ñ–∞–π–ª —î –º–æ–¥—É–ª–µ–º, —ñ –≤ –Ω—å–æ–º—É —î —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ __name__.
#
# –Ø–∫—â–æ —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É (python my_script.py):
#
# __name__ –±—É–¥–µ —Ä—ñ–≤–Ω–∏–º "__main__", –æ—Ç–∂–µ, –∫–æ–¥ —É if __name__ == "__main__": –±—É–¥–µ –≤–∏–∫–æ–Ω–∞–Ω–∏–π.
#
# –Ø–∫—â–æ —Ñ–∞–π–ª —ñ–º–ø–æ—Ä—Ç—É—é—Ç—å —É —ñ–Ω—à–∏–π —Ñ–∞–π–ª (import my_script):
#
# __name__ –±—É–¥–µ "my_script" (–Ω–∞–∑–≤–∞ —Ñ–∞–π–ª—É –±–µ–∑ .py), –æ—Ç–∂–µ, –∫–æ–¥ —É if __name__ == "__main__": –Ω–µ –≤–∏–∫–æ–Ω–∞—î—Ç—å—Å—è.

# –ù–∞–≤—ñ—â–æ —Ü–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ?
# –©–æ–± –≤—ñ–¥–æ–∫—Ä–µ–º–∏—Ç–∏ –∫–æ–¥, —è–∫–∏–π –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –Ω–∞–ø—Ä—è–º—É.
#
# –ù–∞–ø—Ä–∏–∫–ª–∞–¥, blackjack.py –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ—ó —Ç–∞ –∫–ª–∞—Å–∏, —è–∫—ñ –º–æ–∂–Ω–∞ —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏.
#
# –ê–ª–µ —è–∫—â–æ –≤—ñ–Ω –∑–∞–ø—É—â–µ–Ω–∏–π –Ω–∞–ø—Ä—è–º—É, —Ç—Ä–µ–±–∞ —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –≥—Ä—É.
#
# –î–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –º–æ–¥—É–ª—ñ–≤.
#
# –ö–æ–ª–∏ –ø–∏—à–µ—à –∫–æ–¥, –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ print() –∞–±–æ —Ç–µ—Å—Ç–æ–≤—ñ –≤–∏–∫–ª–∏–∫–∏ –≤ if __name__ == "__main__":, —â–æ–± –≤–æ–Ω–∏ –Ω–µ –∑–∞–≤–∞–∂–∞–ª–∏ –ø—Ä–∏ —ñ–º–ø–æ—Ä—Ç—ñ.
#
# –©–æ–± –∑—Ä–æ–±–∏—Ç–∏ —Å–∫—Ä–∏–ø—Ç –±–∞–≥–∞—Ç–æ—Ä–∞–∑–æ–≤–∏–º.
#
# –ö–æ–¥ –º–æ–∂–Ω–∞ –∑–∞–ø—É—Å–∫–∞—Ç–∏ –Ω–∞–ø—Ä—è–º—É –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –≤ —ñ–Ω—à–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–∞—Ö –±–µ–∑ –Ω–µ–ø–æ—Ç—Ä—ñ–±–Ω–∏—Ö –ø–æ–±—ñ—á–Ω–∏—Ö –µ—Ñ–µ–∫—Ç—ñ–≤.