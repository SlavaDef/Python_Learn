Автоматическое управление транзакциями с помощью контекстных менеджеров
Python предоставляет контекстные менеджеры, которые автоматически управляют транзакциями.
Это обеспечивает более безопасное и читаемое управление данными. Давайте рассмотрим пример:

import sqlite3

# Устанавливаем соединение с базой данных

with sqlite3.connect('my_database.db') as connection:
    cursor = connection.cursor()

    try:
        # Начинаем транзакцию автоматически
        with connection:
            # Выполняем операции
            cursor.execute('INSERT INTO Users (username, email) VALUES (?, ?)', ('user3', 'user3@example.com'))
            cursor.execute('INSERT INTO Users (username, email) VALUES (?, ?)', ('user4', 'user4@example.com'))

    except:
        # Ошибки будут приводить к автоматическому откату транзакции
        pass


------------------------------------------------------------------------------------------------------------------------

Использование подготовленных (prepared) запросов для повышения производительности
Подготовленные запросы позволяют многократно выполнять SQL-запросы с разными параметрами,
 что повышает производительность. Давайте рассмотрим пример:

import sqlite3

# Устанавливаем соединение с базой данных
connection = sqlite3.connect('my_database.db')
cursor = connection.cursor()

# Создаем подготовленный запрос
query = 'SELECT * FROM Users WHERE age > ?'
cursor.execute(query, (25,))
users = cursor.fetchall()

# Выводим результаты
for user in users:
  print(user)

# Закрываем соединение
connection.close()

----------------------------------------------------------------------------------------------------------------------

Представления позволяют создавать виртуальные таблицы, которые являются результатом выполнения SQL-запроса. Это упрощает выполнение сложных запросов. Давайте создадим представление для выбора активных пользователей:

import sqlite3

# Устанавливаем соединение с базой данных
connection = sqlite3.connect('my_database.db')
cursor = connection.cursor()

# Создаем представление для активных пользователей
cursor.execute('CREATE VIEW ActiveUsers AS SELECT * FROM Users WHERE is_active = 1')

# Выбираем активных пользователей
cursor.execute('SELECT * FROM ActiveUsers')
active_users = cursor.fetchall()

# Выводим результаты
for user in active_users:
  print(user)

# Закрываем соединение
connection.close()

----------------------------------------------------------------------------------------------------------------------

